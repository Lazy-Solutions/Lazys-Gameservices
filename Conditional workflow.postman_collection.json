{
	"info": {
		"_postman_id": "0b8beacb-fef6-41c5-9bfd-40aa0a9a83e6",
		"name": "Conditional workflow",
		"description": "# üñáÔ∏è Get started here\n\nPostman's [scripting](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) feature allows you to build conditional workflows using a collection. You can branch and loop over a set of requests.\n\nThis template contains a sample conditional workflow for testing successful user creation across a data array.\n\nThe workflow is set to run in successive iterations with different values in each iteration. If the API returns a successful response in an iteration, the next iteration is triggered, and so on. You will get a report of successful user creations when all the iterations are successful. If a user creation fails, the loop is terminated, and you will get a report of the failed attempt.\n\n<img src=\"https://content.pstmn.io/d21cb133-1e04-41f6-9ef6-9aaf85df4e82/aW1hZ2UucG5n\" alt=\"Workflow%20depicting%20the%20collection%20execution\" width=\"638\" height=\"720\">\n\nThe [postman.setNextRequest()](https://learning.postman.com/docs/postman/scripts/branching-and-looping/) function enables you to change the order of requests in a collection while testing. This function allows you to conditionally skip specific requests, repeat requests, terminate the collection early, etc. You can use conditional workflows in various use cases, from [generating a Spotify playlist](https://blog.postman.com/generate-spotify-playlists-using-a-postman-collection/) to [checking your website for broken links](https://blog.postman.com/check-for-broken-links-on-your-website-using-a-postman-collection/).\n\n## üîñ **How to use this template**\n\n**Step 1:** Open the collection and click on the \"View more actions\" icon.\n\n**Step 2:** Click \"Run Collection\" to open the collection runner.  \n  \n**Step 3:** Click on \"Run Conditional Workflow\" to run the collection.\n\n#### Modifying the data\n\nYou can find the data array in the collection variables section, which you can navigate to by clicking on the collection's name in the sidebar and then selecting the Variables tab.\n\nThe data array follows this structure:\n\n``` json\n[\n    {\n        \"username\": \"\",\n        \"name\": \"\",\n        \"role\": \"\"\n    },\n    ...\n]\n\n```\n\n## ‚ÑπÔ∏è Resources\n\n[<u>Scripting in Postman</u>](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[<u>Collection runner</u>](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "482832"
	},
	"item": [
		{
			"name": "Invalid Json Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify Response\", function () {\r",
							"  pm.response.to.have.status(400); // Verify the response status is 200\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "1234",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"\",\r\n    \"mmr\": 2000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/join",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"join"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Fail Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify Response\", function () {\r",
							"  pm.response.to.have.status(401); // Verify the response status is 200\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "1234",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/join",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"join"
					]
				}
			},
			"response": []
		},
		{
			"name": "Join user 1.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify Response\", function () {\r",
							"  pm.response.to.have.status(200); // Verify the response status is 200\r",
							"  pm.response.to.have.jsonBody({ code: 1 }); // Verify the JSON response matches { code: 1 }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "1234",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"mmr\": 2000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/join",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"join"
					]
				}
			},
			"response": []
		},
		{
			"name": "Join user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify Response\", function () {\r",
							"  pm.response.to.have.status(200); // Verify the response status is 200\r",
							"  pm.response.to.have.jsonBody({ code: 1 }); // Verify the JSON response matches { code: 1 }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "1234",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 2,\r\n    \"mmr\": 2000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/join",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"join"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Match",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify Response\", function () {\r",
							"  pm.response.to.have.status(200); // Verify the response status is 200\r",
							"  \r",
							"  const responseBody = pm.response.json(); // Get the JSON response body\r",
							"  \r",
							"  // Verify the presence of 'id' and 'server' fields in the JSON response\r",
							"  pm.expect(responseBody).to.have.property('id');\r",
							"  pm.expect(responseBody).to.have.property('server');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "1234",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8080/match/1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"match",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "users",
			"value": "[{\"username\": \"flash\",\"name\": \"Barry Allen\",\"role\": \"Superhero\"},{\"username\": \"wonder_woman\",\"name\": \"Diana Prince\",\"role\":\"Superhero\"},{\"username\": \"batman\",\"name\": \"Bruce Wayne\",\"role\": \"Superhero\"}]"
		},
		{
			"key": "results",
			"value": "[]"
		},
		{
			"key": "successAPIUrl",
			"value": "https://postman-echo.com/post"
		},
		{
			"key": "failureAPIUrl",
			"value": "https://postman-echo.com/post"
		},
		{
			"key": "idx",
			"value": "0"
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "role",
			"value": ""
		}
	]
}